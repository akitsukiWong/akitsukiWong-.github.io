{"meta":{"title":"渣博客","subtitle":"哈哈哈","description":"汪秋月的个人博客","author":"汪秋月","url":"https://akitsukiwong.github.io"},"pages":[{"title":"关于我","date":"2018-05-10T16:15:47.000Z","updated":"2021-03-10T06:49:11.917Z","comments":true,"path":"about/index.html","permalink":"https://akitsukiwong.github.io/about/index.html","excerpt":"","text":"这是一个渣渣前端的个人博客"},{"title":"","date":"2021-02-27T06:39:12.806Z","updated":"2021-02-27T06:39:12.806Z","comments":true,"path":"demo/canvas/index.html","permalink":"https://akitsukiwong.github.io/demo/canvas/index.html","excerpt":"","text":"canvas 下面其实有两个canvas 您的浏览器不支持canvas，请升级或选择其他浏览器"},{"title":"","date":"2021-02-27T06:16:46.754Z","updated":"2021-02-27T06:16:46.754Z","comments":true,"path":"demo/canvas/index2.html","permalink":"https://akitsukiwong.github.io/demo/canvas/index2.html","excerpt":"","text":"canvas 您的浏览器不支持canvas，请升级或选择其他浏览器 var canvas = document.getElementById(\"myCanvas\"); //根据 id 找到 canvas 元素 var cxt = canvas.getContext(\"2d\"); //getContext() 方法返回一个用于在画布上绘图的环境 cxt.fillStyle = \"#FF0000\"; //填充颜色 不填充颜色默认为黑色 cxt.fillRect(0, 0, 100, 50); //规定了形状，位置，尺寸 12345678&lt;canvas id=\"myCanvas\" width=\"200\" height=\"100\"&gt;您的浏览器不支持canvas，请升级或选择其他浏览器&lt;/canvas&gt;&lt;script type=\"text/javascript\"&gt; var canvas = document.getElementById(\"myCanvas\"); //根据 id 获取 canvas 元素 var cxt = canvas.getContext(\"2d\"); //getContext() 方法返回一个用于在画布上绘图的环境，指定为 2d 的视图环境 cxt.fillStyle = \"#FF0000\"; //填充颜色 cxt.fillRect(0, 0, 100, 50); //规定了形状，位置，尺寸&lt;/script&gt;"}],"posts":[{"title":"初识canvas与canvas动画实现原理","slug":"canvas","date":"2021-02-05T01:53:00.000Z","updated":"2021-03-10T06:48:53.396Z","comments":true,"path":"2021/02/05/canvas/","link":"","permalink":"https://akitsukiwong.github.io/2021/02/05/canvas/","excerpt":"","text":"参考：canvas API中文文档 初识canvas与canvas动画实现原理什么是 canvas canvas 是一个HTML5标签 canvas 的作用是绘制图形 canvas 本身并没有绘图能力，通常是通过js绘制 canvas 提供了多种绘制路径、矩形、圆形、字符以及添加图像等方法可以供开发者调用，可以完成工作中遇到的绝大部分开发问题 canvas 的主要作用 特效、动图 制作图形编辑器等工具 用于可视化领域 可内嵌多种媒体内容和特效内容 游戏，适合图像密集，其中的许多对象会被频繁重绘的游戏 canvas 和 svg 的简单对比 canvas 是HTML5标签，svg 是XML标签 canvas 是基于像素的图形，也就是位图，svg 是矢量图，所以canvas依赖分辨率，放大会失真，产生锯齿，svg不会，所以svg更适合做高保真的视觉呈现 canvas 不支持事件处理器，svg 支持，因为svg绘制出来的每一个图形的元素都是独立的DOM节点，能够方便的绑定事件或用来修改，canvas是一整张画布 canvas 能够以 .png 或 .jpg 格式保存结果图像 canvas 适合游戏，svg不适合做游戏 简单使用1&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;100&quot;&gt;您的浏览器不支持canvas，请升级或选择其他浏览器&lt;/canvas&gt; 与其他标签一样，我们可以使用&lt;canvas&gt;&lt;/canvas&gt;的方式来向页面中嵌入一个画布内容。 标签里的内容只在不支持 canvas 的浏览器上才会显示 width: 宽度，默认值300 height: 高度，默认值150 demo canvas 元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成 12345678&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;100&quot;&gt;您的浏览器不支持canvas，请升级或选择其他浏览器&lt;/canvas&gt;&lt;script type=&quot;text/javascript&quot;&gt; var canvas = document.getElementById(&quot;myCanvas&quot;); //根据 id 获取 canvas 元素 var cxt = canvas.getContext(&quot;2d&quot;); //getContext() 方法返回一个用于在画布上绘图的环境，指定为 2d 的视图环境 cxt.fillStyle = &quot;#FF0000&quot;; //填充颜色 cxt.fillRect(0, 0, 100, 50); //规定了形状，位置，尺寸&lt;/script&gt; demo 总结一下 布置画布：添加&lt;canvas&gt;标签 获取画布：通过js获得canvas对象 获得画笔：使用canvas对象的getContext(&quot;2d&quot;)方法，获得2D环境 坐标 常见形状线 beginPath：开始画一段路径 strokeStyle：设置线条颜色 moveTo(x, y)： 起始点 lineTo(x, y)：终点 stroke()：连接 lineWidth：控制线条宽度 lineCap: 控制线段两端展示 矩形 rect：绘制矩形 strokeRect：绘制矩形描边 被填充的矩形 fillRect：矩形填充 圆-arc：绘制圆弧 被填充的圆形 fill：路径填充 椭圆 ellipse 贝塞尔曲线 quadraticCurveTo：二次贝塞尔曲线 bezierCurveTo：三次贝塞尔曲线 贝塞尔生成器 文字 font textAlign textBaseline fillText strokeRect measureText 根据文字生成随机头像 canvas动画原理快速刷新的静态画面 利用定时器setTimeout或者requestAnimationFrame 绘制 - 清空 - 绘制 - 清空 - 绘制 … clearRect：清空画布 setTimeout通过设定间隔时间来不断改变图像位置，达到动画效果。但是容易出现卡顿、抖动的现象； 卡顿原因： settimeout任务被放入异步队列，只有当主线程任务执行完后才会执行队列中的任务，因此实际执行时间总是比设定时间要晚； settimeout的固定时间间隔不一定与屏幕刷新时间相同，会引起丢帧。 requestAnimationFrame优点： 是由浏览器专门为动画提供的API，在运行时浏览器会自动优化方法的调用，并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了CPU开销。 重绘或回流的时间间隔紧紧跟随浏览器的刷新频率。 隐藏或不可见的元素不会进行重绘或回流，这意味着更少的CPU、GPU和内存使用量。 画一条直线 画一条正弦曲线复习正弦曲线知识","categories":[],"tags":[{"name":"canvas","slug":"canvas","permalink":"https://akitsukiwong.github.io/tags/canvas/"}]}]}