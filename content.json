{"meta":{"title":"渣博客","subtitle":"哈哈哈","description":"汪秋月的个人博客","author":"汪秋月","url":"https://akitsukiwong.github.io"},"pages":[{"title":"关于我","date":"2018-05-10T16:15:47.000Z","updated":"2018-05-11T06:28:29.737Z","comments":true,"path":"about/index.html","permalink":"https://akitsukiwong.github.io/about/index.html","excerpt":"","text":"这是一个渣渣前端的个人博客 个人简历网站版 http://dflxm.oschina.io"}],"posts":[{"title":"基于 vue2 + vuex 构建一个具有 45 个页面的大型单页面应用","slug":"个页面的大型单页面应用","date":"2018-05-18T16:28:13.000Z","updated":"2018-05-18T16:30:33.709Z","comments":true,"path":"2018/05/19/个页面的大型单页面应用/","link":"","permalink":"https://akitsukiwong.github.io/2018/05/19/个页面的大型单页面应用/","excerpt":"","text":"https://www.vue-js.com/topic/58abbd21a9c1282817afc28d github:https://github.com/bailicangdu/vue2-elm","categories":[],"tags":[]},{"title":"css3优惠券/邮票","slug":"css3优惠券-邮票","date":"2018-05-18T12:17:50.000Z","updated":"2018-05-18T12:20:50.751Z","comments":true,"path":"2018/05/18/css3优惠券-邮票/","link":"","permalink":"https://akitsukiwong.github.io/2018/05/18/css3优惠券-邮票/","excerpt":"","text":"css3写的优惠券/邮票 码云地址：http://dflxm.gitee.io/code/%E9%82%AE%E7%A5%A8.html","categories":[],"tags":[{"name":"css3","slug":"css3","permalink":"https://akitsukiwong.github.io/tags/css3/"}]},{"title":"css3做banner","slug":"css3做banner","date":"2018-05-12T07:02:56.000Z","updated":"2018-05-12T07:14:17.458Z","comments":true,"path":"2018/05/12/css3做banner/","link":"","permalink":"https://akitsukiwong.github.io/2018/05/12/css3做banner/","excerpt":"","text":"也是面试时候遇到的问题,回来随便弄了一个 在线地址：http://dflxm.oschina.io/code/ 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;css3写一个banner&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123; margin: 0; padding: 0; &#125; ul li &#123; list-style: none; &#125; .banner-box &#123; position: relative; width: 400px; height: 200px; overflow: hidden; &#125; .banner &#123; width: 1600px; position: absolute; left: 0; animation-name: bannerMove; animation-duration: 8s; animation-iteration-count: infinite; &#125; @keyframes bannerMove &#123; 0%, 30% &#123; left: 0; &#125; 35%, 65% &#123; left: -400px; &#125; 70%, 99% &#123; left: -800px; &#125; 100% &#123; left: -1200px; &#125; &#125; .banner li &#123; float: left; width: 400px; height: 200px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;banner-box&quot;&gt; &lt;ul class=&quot;banner&quot;&gt; &lt;li style=&quot;background-color:#f90;&quot;&gt;&lt;/li&gt; &lt;li style=&quot;background-color:#f00;&quot;&gt;&lt;/li&gt; &lt;li style=&quot;background-color:#9f0;&quot;&gt;&lt;/li&gt; &lt;li style=&quot;background-color:#333;&quot;&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://akitsukiwong.github.io/tags/css/"}]},{"title":"css画三角形","slug":"css画三角形","date":"2018-05-12T06:13:43.000Z","updated":"2018-05-12T06:52:27.693Z","comments":true,"path":"2018/05/12/css画三角形/","link":"","permalink":"https://akitsukiwong.github.io/2018/05/12/css画三角形/","excerpt":"","text":"面试时候遇到的问题，只要设置两个边框透明就行了,学会了这个，妈妈再也不怕我面试的时候被要求画三角形了 上三角 1234567#triangle-up &#123;width: 0;height: 0;border-left: 50px solid transparent;border-right: 50px solid transparent;border-bottom: 100px solid red;&#125; 下三角 1234567#triangle-down &#123;width: 0;height: 0;border-left: 50px solid transparent;border-right: 50px solid transparent;border-top: 100px solid red;&#125; 左三角 1234567#triangle-left &#123;width: 0;height: 0;border-top: 50px solid transparent;border-right: 100px solid red;border-bottom: 50px solid transparent;&#125; 右三角 1234567#triangle-right &#123;width: 0;height: 0;border-top: 50px solid transparent;border-left: 100px solid red;border-bottom: 50px solid transparent;&#125;","categories":[{"name":"代码片段","slug":"代码片段","permalink":"https://akitsukiwong.github.io/categories/代码片段/"}],"tags":[{"name":"css","slug":"css","permalink":"https://akitsukiwong.github.io/tags/css/"}]},{"title":"ECharts学习","slug":"2018-05-12 ECharts学习","date":"2018-05-12T06:10:04.000Z","updated":"2018-05-27T03:41:40.374Z","comments":true,"path":"2018/05/12/2018-05-12 ECharts学习/","link":"","permalink":"https://akitsukiwong.github.io/2018/05/12/2018-05-12 ECharts学习/","excerpt":"","text":"面试了很多家单位，都问到了ECharts，所以准备一下还是很有必要的 2018-5-27 更新： 新单位也用到了ECharts，画了几个，也不难，官方文档也很全 主要就这几个步骤 引用js 准备放图表的容器 初始化图表，设置参数 有其它个性化要求，根据官方的文档，改一改配置项都可以快速解决","categories":[{"name":"笔记","slug":"笔记","permalink":"https://akitsukiwong.github.io/categories/笔记/"}],"tags":[]},{"title":"CSS初始化","slug":"2018-05-11 CSS初始化","date":"2018-05-11T09:24:49.000Z","updated":"2018-05-11T09:31:22.576Z","comments":true,"path":"2018/05/11/2018-05-11 CSS初始化/","link":"","permalink":"https://akitsukiwong.github.io/2018/05/11/2018-05-11 CSS初始化/","excerpt":"","text":"为什么初始化css?考虑到浏览器兼容性问题，不同浏览器对标签的默认值是不同的 通用初始化样式1234567891011121314151617181920212223242526272829303132333435body&#123; margin: 0;padding: 0;font-family: &quot;微软雅黑&quot;;overflow: hidden;&#125;body,html&#123;-webkit-text-size-adjust: none;width: 100%;height: 100%;&#125;*&#123;text-decoration: none;list-style: none;&#125;img&#123;border: 0px;&#125;ul,li,dl,dd,dt,p,ol,h1,h2,h3,h4,h5&#123;font-size: 12px;font-weight: 100;padding: 0;margin: 0;&#125;.wrap&#123;margin: 0 auto;&#125;.fl&#123;float: left;&#125;.fr&#123;float: right;&#125;.index&#123;overflow: hidden;&#125;.clr&#123;clear:both; height:0px; width:100%; font-size:1px; line-height:0px; visibility:hidden; overflow:hidden;&#125;.pointer&#123;cursor:pointer;&#125;a,input,button&#123; outline:none; &#125;::-moz-focus-inner&#123;border:0px;&#125;/*a:link &#123;color:#0f0;text-decoration:none;&#125; a:visited &#123;color: #FFFF00; text-decoration:none;&#125; a:hover &#123;color: #00FF00; text-decoration:underline;&#125; a:active &#123;color: #0000FF; text-decoration:underline;&#125;*/a&#123;color: #000;&#125;.wrapper&#123;clear: both;width: 100%;&#125;table &#123; border-collapse:collapse; &#125;word-break:break-all /*文字换行*//*white-space:nowrap 文字不换行*//*默认滚动条样式修改ie9 google Firefox 等高版本浏览器有效*//*::selection &#123;background: #D03333;color: white;text-shadow: none;&#125;::-webkit-scrollbar-track-piece&#123;width:10px;background-color:#f2f2f2&#125;::-webkit-scrollbar&#123;width:10px;height:6px&#125;::-webkit-scrollbar-thumb&#123;height:50px;background-color:rgba(0,0,0,.3);&#125;::-webkit-scrollbar-thumb:hover&#123;background:#cc0000&#125;*//*渐变*//*background-image: -moz-linear-gradient(top, #8fa1ff, #3757fa);background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0, #ff4f02), color-stop(1, #8f2c00)); Saf4+, Chrome filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=&apos;#c6ff00&apos;, endColorstr=&apos;#538300&apos;, GradientType=&apos;0&apos;); IE*/ 另一种通用化样式 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859/* CSS Document */html, body, div, span, object, iframe,h1, h2, h3, h4, h5, h6, p, blockquote, pre,abbr, address, cite, code,del, dfn, em, img, ins,kbd, q, samp,small, strong, sub, sup, var,b, i,dl, dt, dd, ol, ul, li,fieldset, form, label, legend,table, caption, tbody, tfoot,thead,tr, th, td,article, aside, canvas, details, figcaption, figure, footer, header, hgroup, menu, nav, section, summary,time, mark, audio, video &#123; margin:0; padding:0; border:0; outline:0; font-size:100%; vertical-align:baseline; background:transparent; outline-style:none;/*FF*/ &#125;body &#123; line-height:1;&#125;a&#123; margin:0; padding:0; border:0; font-size:100%; vertical-align:baseline; background:transparent;&#125;a:hover,a:focus&#123; text-decoration:none; bblr:expression(this.onFocus=this.blur());/*IE*/ outline-style:none;/*FF*/ &#125;table &#123; border-collapse:collapse; border-spacing:0;&#125;input, select &#123; vertical-align:middle;&#125;/*css为clearfix，清除浮动*/.clearfix::before,.clearfix::after&#123; content: &quot;&quot;; height: 0; line-height: 0; display: block; visibility: hidden; clear: both;&#125;.clearfix:after&#123;clear:both;&#125; .clearfix&#123; *zoom:1;/*IE/7/6*/&#125; 雅虎工程师提供的CSS初始化示例代码12345678910111213141516body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,button,textarea,p,blockquote,th,td &#123; margin:0; padding:0; &#125;body &#123; background:#fff; color:#555; font-size:14px; font-family: Verdana, Arial, Helvetica, sans-serif; &#125;td,th,caption &#123; font-size:14px; &#125;h1, h2, h3, h4, h5, h6 &#123; font-weight:normal; font-size:100%; &#125;address, caption, cite, code, dfn, em, strong, th, var &#123; font-style:normal; font-weight:normal;&#125;a &#123; color:#555; text-decoration:none; &#125;a:hover &#123; text-decoration:underline; &#125;img &#123; border:none; &#125;ol,ul,li &#123; list-style:none; &#125;input, textarea, select, button &#123; font:14px Verdana,Helvetica,Arial,sans-serif; &#125;table &#123; border-collapse:collapse; &#125;html &#123;overflow-y: scroll;&#125; .clearfix:after &#123;content: &quot;.&quot;; display: block; height:0; clear:both; visibility: hidden;&#125;.clearfix &#123; *zoom:1; &#125; 腾讯官网 样式初始化123456789body,ol,ul,h1,h2,h3,h4,h5,h6,p,th,td,dl,dd,form,fieldset,legend,input,textarea,select&#123;margin:0;padding:0&#125; body&#123;font:12px&quot;宋体&quot;,&quot;Arial Narrow&quot;,HELVETICA;background:#fff;-webkit-text-size-adjust:100%;&#125; a&#123;color:#2d374b;text-decoration:none&#125; a:hover&#123;color:#cd0200;text-decoration:underline&#125; em&#123;font-style:normal&#125; li&#123;list-style:none&#125; img&#123;border:0;vertical-align:middle&#125; table&#123;border-collapse:collapse;border-spacing:0&#125; p&#123;word-wrap:break-word&#125; 新浪官网 样式初始化12345678910body,ul,ol,li,p,h1,h2,h3,h4,h5,h6,form,fieldset,table,td,img,div&#123;margin:0;padding:0;border:0;&#125; body&#123;background:#fff;color:#333;font-size:12px; margin-top:5px;font-family:&quot;SimSun&quot;,&quot;宋体&quot;,&quot;Arial Narrow&quot;;&#125; ul,ol&#123;list-style-type:none;&#125; select,input,img,select&#123;vertical-align:middle;&#125; a&#123;text-decoration:none;&#125; a:link&#123;color:#009;&#125; a:visited&#123;color:#800080;&#125; a:hover,a:active,a:focus&#123;color:#c00;text-decoration:underline;&#125; 淘宝官网 样式初始化12345678910111213141516171819202122232425body, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, fieldset, legend, button, input, textarea, th, td &#123; margin:0; padding:0; &#125; body, button, input, select, textarea &#123; font:12px/1.5tahoma, arial, \\5b8b\\4f53; &#125; h1, h2, h3, h4, h5, h6&#123; font-size:100%; &#125; address, cite, dfn, em, var &#123; font-style:normal; &#125; code, kbd, pre, samp &#123; font-family:couriernew, courier, monospace; &#125; small&#123; font-size:12px; &#125; ul, ol &#123; list-style:none; &#125; a &#123; text-decoration:none; &#125; a:hover &#123; text-decoration:underline; &#125; sup &#123; vertical-align:text-top; &#125; sub&#123; vertical-align:text-bottom; &#125; legend &#123; color:#000; &#125; fieldset, img &#123; border:0; &#125; button, input, select, textarea &#123; font-size:100%; &#125; table &#123; border-collapse:collapse; border-spacing:0; &#125; 网易官网 样式初始化html &#123;overflow-y:scroll;&#125; body &#123;margin:0; padding:29px00; font:12px&quot;\\5B8B\\4F53&quot;,sans-serif;background:#ffffff;&#125; div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,form,fieldset,input,textarea,blockquote,p&#123;padding:0; margin:0;&#125; table,td,tr,th&#123;font-size:12px;&#125; li&#123;list-style-type:none;&#125; img&#123;vertical-align:top;border:0;&#125; ol,ul &#123;list-style:none;&#125; h1,h2,h3,h4,h5,h6&#123;font-size:12px; font-weight:normal;&#125; address,cite,code,em,th &#123;font-weight:normal; font-style:normal;&#125; 下面顺便给出admin10000.com 的html模板，用于每次新开发页面使用。123456789101112131415161718&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;zh-cn&quot;&gt; &lt;head&gt; &lt;title&gt;网站标题 - Admin10000.com &lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; &lt;meta http-equiv=&quot;Content-Language&quot; content=&quot;zh-CN&quot; /&gt; &lt;meta name=&quot;Author&quot; content=&quot;网页作者&quot; /&gt; &lt;meta name=&quot;Copyright&quot; content=&quot;网站版权&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;网站关键字&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;网站描述&quot; /&gt; &lt;link rel=&quot;Shortcut Icon&quot; href=&quot;网站.ico图标路径&quot; /&gt; &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;CSS文件路径&quot; /&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;JS文件路径&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"代码片段","slug":"代码片段","permalink":"https://akitsukiwong.github.io/categories/代码片段/"}],"tags":[{"name":"css","slug":"css","permalink":"https://akitsukiwong.github.io/tags/css/"}]},{"title":"常见前端面试题","slug":"2018-05-10 常见前端面试题","date":"2018-05-10T14:20:58.000Z","updated":"2018-05-11T09:21:19.494Z","comments":true,"path":"2018/05/10/2018-05-10 常见前端面试题/","link":"","permalink":"https://akitsukiwong.github.io/2018/05/10/2018-05-10 常见前端面试题/","excerpt":"","text":"HTML什么是盒子模型？在网页中，一个元素占有空间的大小由几个部分构成，其中包括元素的内容（content），元素的内边距（padding），元素的边框（border），元素的外边距（margin）四个部分。这四个部分占有的空间中，有的部分可以显示相应的内容，而有的部分只用来分隔相邻的区域或区域。4个部分一起构成了css中元素的盒模型。 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素：a、b、span、img、input、strong、select、label、em、button、textarea块级元素：div、ul、li、dl、dt、dd、p、h1-h6、blockquote空元素：即系没有内容的HTML元素，例如：br、meta、hr、link、input、img 块元素与内联元素的区别？1.块元素，总是在新行上开始；内联元素，和其他元素都在一行上。 2.块元素，能容纳其他块元素或内联元素；内联元素，只能容纳文本或者其他内联元素。 3.块元素中高度，行高以及顶和底边距都可控制；内联元素中高，行高及顶和底边距不可改变。 常见的块级元素 address – 地址 blockquote – 块引用 center – 举中对齐块 dir – 目录列表 div – 常用块级容易，也是CSS layout的主要标签 dl – 定义列表 fieldset – form控制组 form – 交互表单 h1 – 大标题 h2 – 副标题 h3 – 3级标题 h4 – 4级标题 h5 – 5级标题 h6 – 6级标题 hr – 水平分隔线 isindex – input prompt menu – 菜单列表 noframes – frames可选内容，（对于不支持frame的浏览器显示此区块内容 noscript – 可选脚本内容（对于不支持script的浏览器显示此内容） ol – 有序表单 p – 段落 pre – 格式化文本 table – 表格 ul – 无序列表 常见的内联元素 a – 锚点 abbr – 缩写 acronym – 首字 b – 粗体(不推荐) bdo – bidi override big – 大字体 br – 换行 cite – 引用 code – 计算机代码(在引用源码的时候需要) dfn – 定义字段 em – 强调 font – 字体设定(不推荐) i – 斜体 img – 图片 input – 输入框 kbd – 定义键盘文本 label – 表格标签 q – 短引用 s – 中划线(不推荐) samp – 定义范例计算机代码 select – 项目选择 small – 小字体文本 span – 常用内联容器，定义文本内区块 strike – 中划线 strong – 粗体强调 sub – 下标 sup – 上标 textarea – 多行文本输入框 tt – 电传文本 u – 下划线 CSSCSS实现垂直水平居中js如何理解闭包？定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。 表现形式：使函数外部能够调用函数内部定义的变量。 jQuery相关jQuery库中的$()是什么？$()函数是jQuery()函数的别称。$()函数用于将任何对象包裹成 jQuery 对象，接着你就被允许调用定义在 jQuery 对象上的多个不同方法。你可以将一个选择器字符串传入 $()函数，它会返回一个包含所有匹配的 DOM 元素数组的 jQuery 对象。 其它","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"https://akitsukiwong.github.io/tags/面试/"}]},{"title":"随便做的一个个人简历","slug":"2018-05-10 随便做的一个个人简历","date":"2018-05-10T07:44:58.000Z","updated":"2018-05-11T09:07:22.744Z","comments":true,"path":"2018/05/10/2018-05-10 随便做的一个个人简历/","link":"","permalink":"https://akitsukiwong.github.io/2018/05/10/2018-05-10 随便做的一个个人简历/","excerpt":"","text":"码云page地址: http://dflxm.oschina.io","categories":[],"tags":[{"name":"面试","slug":"面试","permalink":"https://akitsukiwong.github.io/tags/面试/"},{"name":"简历","slug":"简历","permalink":"https://akitsukiwong.github.io/tags/简历/"}]},{"title":"hexo的常用命令","slug":"2018-05-10 hexo的常用命令","date":"2018-05-09T17:43:33.000Z","updated":"2018-05-11T09:35:48.784Z","comments":true,"path":"2018/05/10/2018-05-10 hexo的常用命令/","link":"","permalink":"https://akitsukiwong.github.io/2018/05/10/2018-05-10 hexo的常用命令/","excerpt":"","text":"指令新建一篇文章1$ hexo new 新的文章名称 简写 1$ hexo n 新的文章名称 12345678title: 使用Hexo搭建个人博客layout: postdate: 2014-03-03 19:07:43comments: truecategories: Blogtags: Hexokeywords: Hexo, Blogdescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。 清除缓存文件 db.json 和已生成的静态文件 public1$ hexo clean 生成静态文件1$ hexo generate 简写 1$ hexo g 自动生成网站静态文件，并部署到设定的仓库1$ hexo deploy 简写 1$ hexo d 启动本地服务器，用于预览主题。默认地址： http://localhost:4000/ 1$ hexo s","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://akitsukiwong.github.io/tags/hexo/"}]},{"title":"rem.js","slug":"2017-12-18 rem-js","date":"2017-12-18T07:25:44.000Z","updated":"2018-05-11T09:08:54.638Z","comments":true,"path":"2017/12/18/2017-12-18 rem-js/","link":"","permalink":"https://akitsukiwong.github.io/2017/12/18/2017-12-18 rem-js/","excerpt":"","text":"12345678910111213window.onload = function()&#123; /*720代表设计师给的设计稿的宽度，你的设计稿是多少，就写多少;100代表换算比例，这里写100是 为了以后好算,比如，你测量的一个宽度是100px,就可以写为1rem,以及1px=0.01rem等等*/ getRem(750,100)&#125;;window.onresize = function()&#123; getRem(750,100)&#125;;function getRem(pwidth,prem)&#123; var html = document.getElementsByTagName(&quot;html&quot;)[0]; var oWidth = document.body.clientWidth || document.documentElement.clientWidth; html.style.fontSize = oWidth/pwidth*prem + &quot;px&quot;;&#125;","categories":[{"name":"代码片段","slug":"代码片段","permalink":"https://akitsukiwong.github.io/categories/代码片段/"}],"tags":[{"name":"js","slug":"js","permalink":"https://akitsukiwong.github.io/tags/js/"},{"name":"rem","slug":"rem","permalink":"https://akitsukiwong.github.io/tags/rem/"}]},{"title":"pc端移动端跳转js","slug":"2017-12-18 pc端移动端跳转js","date":"2017-12-17T17:43:33.000Z","updated":"2018-05-11T09:47:51.590Z","comments":true,"path":"2017/12/18/2017-12-18 pc端移动端跳转js/","link":"","permalink":"https://akitsukiwong.github.io/2017/12/18/2017-12-18 pc端移动端跳转js/","excerpt":"经常用到的跳转代码","text":"经常用到的跳转代码 if((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) { window.location.href=”你的手机版地址”;}else{ window.location.href=”你的电脑版地址”;}","categories":[{"name":"代码片段","slug":"代码片段","permalink":"https://akitsukiwong.github.io/categories/代码片段/"}],"tags":[{"name":"跳转","slug":"跳转","permalink":"https://akitsukiwong.github.io/tags/跳转/"},{"name":"js","slug":"js","permalink":"https://akitsukiwong.github.io/tags/js/"}]},{"title":"javascript高级程序设计学习笔记","slug":"2017-12-01 javascript高级程序设计学习笔记","date":"2017-11-30T17:45:22.000Z","updated":"2018-05-11T08:51:00.541Z","comments":true,"path":"2017/12/01/2017-12-01 javascript高级程序设计学习笔记/","link":"","permalink":"https://akitsukiwong.github.io/2017/12/01/2017-12-01 javascript高级程序设计学习笔记/","excerpt":"","text":"第一章 HTML中使用JavaScriptscript元素script中有六个属性 async charset defer language src type 标签的位置传统做法放在&lt;head&gt;中，js会被先加载页面会有延迟 所以把JavaScript引入放在&lt;body&gt;元素中页面元素的后面 这样先加载页面内容，用户会因为空白页面时间缩短而感到页面打开速度加快 延迟脚本HTML 4.01为&lt;script&gt;标签定义了defer属性。 相当于告诉浏览器立即下载延迟执行。 1&lt;script type=&quot;text/javascript&quot; defer=&quot;defer&quot; src=&quot;example.js&quot;&gt;&lt;/script&gt; 异步脚本async 1&lt;script type=&apos;text/javascript&apos; async src=&apos;example.js&apos;&gt;&lt;/script&gt; 在XHTML中的用法XTML（可拓展超文本标记语言），是将HTML作为XML的应用而重新定于的一个标准规则比HTML严格 第二章 基本概念语法ECMAScript大量借鉴C及其他类C语言（Java等） 区分大小写ECMAScript中一切（变量、函数名和操作符）都区分大小写。 标识符标识符，指变量、函数、属性都名字，或者函数的参数。 第一个字符必须是字母、下划线（_）或者一个美元符号（$）； 其他字符可以是字母、下划线、美元符号或数字。 注释C风格注释 123456// 单行注释/** 这是一个多行*（块级）注释*/ 严格模式ECMAScript 5 引入严格模式 启用严格模式可在顶部添加use strict; 1234function()&#123; &quot;use strict&quot;; //函数体&#125; 语句分号结尾；代码块{ } 里面 关键字和保留字变量ECMAScript的变量是松散类型的，可以保存任何类型的数据。 定义变量使用 var 操作符 函数中var的是局部变量，省略var是全局变量 定义多个变量（用逗号隔开） 123var message = &quot;hi&quot; , found = false , age = 29 ; 数据类型ES中有五种简单的数据类型 1- Undefined —– 未定义 2- Null ————- 3- Boolean ——– 布尔值 4- Number ——— 数值 5- String ———— 还有一种复杂数据类型 Object typeof 操作符12var message = &quot;some string&quot; ;alert(typeof message) ; //&quot;string&quot; typeof 返回值 undefined —— 为定义 boolean ——— 布尔值 string ———— 字符串 number ———- 数值 object ———— 对象 或者 null function ———- 函数 undefined 类型var 声明变量但为对其加以初始化的值就是undefined Null类型Boolean 类型true和false Number类型 整数和浮点数（带小数点的数值，小数点后至少有一位数字） 浮点数值极大极小的数字用e表示法（科学计数法） 12var floatNum = 3.125e7 //31250000var floatNum = 3e-17 //0.00000000000000003 浮点数值最高精度为17位小数，其计算精度远远不如整数，例如 0.1 + 0.2 结果不是 0.3 而是 0.300000000000004。 数值范围 Infinity （负无穷） Infinity （正无穷） NaN非数值 （not a number） 任何涉及NaN的操作都会返回NaN NaN和任何值都不相等，包括NaN 1alert（NaN == NaN） //false isNaN（）函数，查询是否为数值 123alert(isNaN(NaN)); //truealert(isNaN(10)); //false(10是一个数值)alert(isNaN(&quot;blue&quot;)) //true 数值转换 number() – 如果是布尔值，返回0和1 – 如果是数字，简单的传入和返回 – 如果是null，返回0 – 如果是undefined，返回NaN – 如果是字符串……… – 如果是对象，调用valueOf( ) 方法，如果转换的对象是NaN，调用toString（）方法 parseInt() parseFloat() string 类型单引号和双引号字符串形式完全相同 字符字面量string数据类型包含一些特殊的字符字面量，也叫转义序列，用于表示非打印字符 \\n 换行 \\t 制表 \\b 退格 等… 字符串的特点ES中字符串是不可变的，字符串一旦创建，它们的值就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充改变量。 转换为字符串toString（） Object 类型对象其实就是一组数据和功能的集合。对象可以通过new操作符来创建 1var o = new Object( ) ; （括号可以省略，但不推荐） 操作符一元操作符只能操作一个值但操作符叫做一元操作符。 递增和递减操作符++age；等于age = age +1; –age; 等于age = age - 1； 【前置型】会影响语句的结果，求值之前执行 【后置型】不会影响语句结果，求值之后执行 例子 1234var num1 = 2 ;var num2 = 20 ;var num3 = --num + num2 ; //21var num4 = num1 + num2 ; //21 1234var num1 = 2 ;var num2 = 20 ;var num3 = num-- + num2 ; //22var num4 = num1 + num2 ; //21 一元加和减操作符一元加操作符以一个加号（+）表示，放在数值前面，对数值不会产生任何影响。 12var num = 25 ;num = +num ; //25 一元减操作符主要表示负数。 位操作符转化位二进制 12var num = -18 ;alert(num.toString(2)) ; //&quot;-10010&quot; 按位非（NOT）按位非由一个波浪号【～】表示，执行按位非的结果就是返回数值的反码（二进制逐位取反） 按位与（AND）按位与由一个和字符号【&amp;】表示，都是1返回1，有0就返回0 按位或（OR）按位或由一个竖线符号【|】表示，有1返回1，都是0才返回0 左移【&lt;&lt;】，会将数值的所有位向左移动制定的位数。 12var oldValue = 2 ; //二进制10var newValue = oldValue &lt;&lt; 5; //二进制100000，即64 右移【&gt;&gt;】,会将数值向右移动，但保留符号位 12var oldValue = 64 ; //二进制1000000var newValue = oldValue &gt;&gt; 5; //二进制10，即2 无符号右移【&gt;&gt;&gt;】，会将数值的所有32位都向右移动。 对于正数于【&gt;&gt;】一样，对于负数无符号右移后结果会变得非常大，因为无符号右移会移动所有的二进制码。 12var oldValue = -64 ; //二进制1000000var newValue = oldValue &gt;&gt;&gt; 5; //十进制134217726 3.5.3 布尔操作符布尔操作符一共三个 非（NOT）【 ！】 与（AND） 【 &amp;&amp; 】 或（OR） 【 || 】 乘性操作符 乘法 【 * 】 除法 【 / 】 求模 （余数） 【 % 】 1var result = 26 % 5 ; //等于 1 加性操作符 加法 【 + 】 减法 【 - 】 关系操作符 小于 【 &lt; 】 大于 【 &gt; 】 小于等于 【 &lt;= 】 大于等于 【 &gt;= 】 相等操作符相等和不相等（先转换再比较） 全等和不全等（仅比较不转换） 相等和不相等 相等 【 == 】 不相等 【 != 】 全等和不全等 全等 【 === 】 不全等 【 !== 】 条件操作符1variable = boolean_expression ? true_value : false_value 基于对boolean_expression求值对结果，决定给变量variable赋什么值。如果为true，赋true_value值，如果为false，赋false_value值 1var max = (num1 &gt; num2) ? num1 : num2 ; max将保存最大对值，表达式意思是：如果num1大于num2，给max赋num1值，反之赋值num2 赋值操作符简单赋值操作符由符号【 = 】表示，作用：把右侧对值赋给左侧对变量 逗号操作符可以在一条语句中执行多个操作 1var num1 = 1, num2 = 2, num3 = 3; 逗号操作符还可以用作赋值，会返回表达式对最后一项。 1var num = ( 5, 1, 4, 8, 0); //num的值为0，因为0是表达式的最后一项 语句if语句12345if ( condition【条件】 ) &#123; statement1【语句1】； &#125; else &#123; statement【语句2】； &#125; 1234567if( condition1【条件1】 )&#123; statement1【语句1】；&#125; else if ( condition2【条件2】 )&#123; statemen2【语句2】；&#125; else &#123; statement3【语句3】；&#125; do-while 语句12345do&#123; statement【语句】&#125; while &#123; expression【条件】&#125; while 语句123while( expression【条件】 )&#123; statement【语句】&#125; for语句for语句也是一种前端测试循环语句，它具有在执行循环之前初始化变量和定义循环后要执行的代码的能力。 123for(initialization【初始化】; expression【条件】; post-loop-expression【循环表达式】)&#123; statement【语句】;&#125; 当三个表达式全部省略就会创建一个无限循环 123for( ; ; )&#123; //无限循环 doSomething();&#125; 3.6.5 for-in语句for-in语句是一种精准当迭代语句，可以用来枚举对象当属性。 123for( property【属性】 in expression)&#123; statement【语句】&#125; 3.6.6 label语句1label【标签】: statement 123start: for (var i = 0; i &lt; count; i++)&#123; alert(i);&#125; 3.6.7 break和continue语句break和continue用于在循环中精确的控制代码的执行【break】立即退出循环，强制继续执行循环后面的语句【continue】立即退出循环，退出循环后会从循环的顶部继续执行break和continue都可以和label语句联合使用，从而返回代码中特定的位置。 3.6.8 with语句123with(expreession【条件】)&#123; statement【语句】&#125; with语句主要目的是为了简化多次编写同一个对象的工作123var qs = location.search.substring(1);var hostName = location.hostname;var url = location.href; 以上代码都包含了location对象，用with语句12345with(location)&#123; var qs = search.substring(1); var hostName = hostname; var url = href;&#125; 不建议使用过with语句 3.6.9 switch 语句1234567891011switch(expression)&#123; case value: statement break; case value: statement break; case value: statement break; case value: statement break; default: statement&#125; 相当于if-else语句简化写法123456789if(i == 25)&#123; alert(&quot;25&quot;);&#125; else if(i == 35)&#123; alert(&quot;35&quot;)&#125; else if(i == 45)&#123; alert(&quot;45&quot;)&#125;else &#123; alert(&quot;other&quot;)&#125; 等价于switch语句12345678910111213switch( i )&#123; case 25: alert(&quot;25&quot;); break; case 35: alert(&quot;35&quot;); break; case 45: alert(&quot;45&quot;); break; default: alert(&quot;other&quot;);&#125; 3.7 函数123function functionName(arg0, arg1, ...,argN)&#123; statements&#125; 位于语句之后都任何代码都永远不会执行 3.7.1 理解参数命名的参数只提供便利，但不是必须的 3.7.2 没有重载第三章 变量、作用域和内存问题4.1 基本类型和引用类型的值【基本类型】简单的数据段【引用类型】可能有多个值构成的对象 4.1.1 动态的属性4.1.2 复制变量值4.1.3 传递参数当在函数内部重写obj时，这个变量引用的就是一个局部对象，这个局部对象会在函数执行完毕后立即销毁。12345678function setName(obj)&#123; obj.name = &quot;Nicholas&quot;; obj = new Object(); obj.name = &quot;Greg&quot;;&#125;var person = new Object();set.Name(person);alert(person.name); //&quot;Nicholas&quot; 4.1.4 检测类型instanceof操作符1result = variable instanceof constructor 例子123alert(person instanceof Object); //变量person是Object吗？alert(colors instanceof Array); //变量colors是Array吗？alert(pattern instanceof RegExp); //变量pattern是RegExp吗？ 4.2 执行环境及作用域延长作用域链4.2.2 没有块级作用域声明变量使用var声明的变量会自动添加到最接近到环境中如果初始化变量没有使用var 声明，该变量会自动被添加到全局环境。 查询标识符4.3 垃圾收集js具有垃圾自动收集功能 4.3.1 标记清除4.3.2 引用计数4.3.3 性能问题4.3.4 管理内存第五章 引用类型5.1 Object类型创建Object实例有两种方式 使用new操作符后跟Object构造函数123var person = new Object();person.name = &quot;Nicholas&quot;;person.age = &quot;29&quot;; Object可以省略，用大括号代替123var person = &#123;&#125;;person.name = &quot;Nicholas&quot;;person.age = &quot;29&quot;; 使用对象字面量表示法，是对象定义的一种简写形式，目的在于简化创建包含大量属性的对象的过程。1234var person = &#123; name = &quot;Nicholas&quot; , age = 29&#125;; 访问对象属性可以用点表示法，也可以用方括号12alert(person.name); //Nicholasalert(person[&quot;name&quot;]); //Nicholas 方括号语法的主要优点是可以通过变量来访问属性12var propertyName = &quot;name&quot;;alert(person[propertyName]); //Nicholas 5.2 array类型创建数组有两种方法1var colors = new Array(); 创建length值为20的数组1var colors = new Array( 20 ); 也可以向Array构造函数传递数组中应该包含的项1var colors = new Array( &quot;red&quot;,&quot;blue&quot;,&quot;green&quot; ); 可以省略new操作符1var colors = Array(); 可以使用字面量表示法，数组用方括号表示，逗号隔开12var colors = [&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;]; var names = [] //创建一个空数组 利用length属性可以方便的在数组末尾添加新项123var colors = [&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;]; colors[colors.length] = &quot;black&quot;; //在位置3添加一种颜色colors[colors.length] = &quot;brown&quot; //在位置4添加一种颜色 5.2.1 检测数组123if(value instanceof Array)&#123; //do something&#125; ES5新增的Array.isArray()方法，用于确定某个值到底是不是数组，而不管它是在哪个全局环境下创建的。123if(Array.isArray(value))&#123; //do something&#125; 5.2.2 转换方法join方法可以使用不同的分隔符来构建这个字符串join方法只接受一个参数，用作分隔符的字符串123var colors = [&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;];alert(colors.join(&quot;,&quot;)); //red,blue,greenalert(colors.join(&quot;||&quot;)); //red||blue||green 5.2.3 栈方法栈是一种【LOFO】后进先出的数据结构栈中 插入叫做推入，移除叫做弹出 push() 接收任意数量的参数逐个添加到数组末尾（从末尾加）pop() 从数组末尾移除最后一项（删最后一个） 5.2.4 队列方法队列是【FIFO】先进先出 shift() 移除数组中的第一个项（删第一个）unshift() 在数组前端添加任意个项（从前面加） 5.2.5 重排列方法reverse() 翻转数组项的顺序sort() 升序排列（首字母排序，不是按大小） 比较函数 升序1function compare(value1, value2) &#123; if (value1 &lt; value2) &#123; return -1; &#125; else if (value1 &gt; value2) &#123; return 1; &#125; else &#123; return 0; &#125; &#125; var values = [0, 1, 5, 10, 15]; values.sort(compare); alert(values); //0,1,5,10,15 降序1function compare(value1, value2) &#123; if (value1 &lt; value2) &#123; return 1; &#125; else if (value1 &gt; value2) &#123; return -1; &#125; else &#123; return 0; &#125; &#125; var values = [0, 1, 5, 10, 15]; values.sort(compare); alert(values); //15,10,5,1,0 5.2.6 操作方法concat() 末尾添加数组 splice() 数组中部插入项 删除splice（要删除的第一项的位置， 要删除的项数）splice( 0, 2 ) 删除数组中前两项 插入splice( 起始位置， 0（要删除的项数）， 要插入的项)splice( 2, 0, &quot;red&quot;, &quot;green&quot; ) 从当前数组的位置2 开始插入字符串“red” 和“green” 替换splice( 起始位置， 要删除的项数， 要插入的任意数量的项)splice( 2, 1, &quot;red&quot;, &quot;green&quot; ) 会删除当前数组位置 2 的项， 然后再从位置 2 开始插入字符串 “red” 和“green”例子 1var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;]; var removed = colors.splice(0,1); //remove the first item alert(colors); //green,blue alert(removed); //red - one item array removed = colors.splice(1, 0, &quot;yellow&quot;, &quot;orange&quot;); //insert two items at position 1 alert(colors); //green,yellow,orange,blue alert(removed); //empty array removed = colors.splice(1, 1, &quot;red&quot;, &quot;purple&quot;); //insert two values, remove one alert(colors); //green,red,purple,orange,blue alert(removed); //yellow - one item array 5.2.7 位置方法indexOf() 从数组的开头（位置0）开始向后查找， 没找到的情况下会返回-1lastIndexOf 从数组的末尾开始向前查找， 没找到的情况下会返回-1例子 1234567891011121314var numbers = [1,2,3,4,5,4,3,2,1]; alert(numbers.indexOf(4)); //3alert(numbers.lastIndexOf(4)); //5 alert(numbers.indexOf(4, 4)); //5alert(numbers.lastIndexOf(4, 4)); //3 var person = &#123; name: &quot;Nicholas&quot; &#125;;var people = [&#123; name: &quot;Nicholas&quot; &#125;];var morePeople = [person]; alert(people.indexOf(person)); //-1alert(morePeople.indexOf(person)); //0 5.2.8 迭代方法every() 对数组中的每一项运行给定函数， 如果该函数对每一项都返回true， 则返回true。filter() 对数组中的每一项运行给定函数， 返回该函数会返回 true 的项组成的数组。forEach() 对数组中的每一项运行给定的函数。 这个方法没有返回值。map() 对数组中的每一项运行给定的函数， 返回每次函数调用的结果组成的数组。some() 对数组中的每一项运行给定的函数， 如果该函数对任一项返回true， 则返回true。 以上方法都不会修改数组中的包含的值， 传入这些方法会接受三个参数（数组项的值， 该项在数组中的位置， 数组对象本身） every() some() 例子以上代码调用的every() 和 some() ， 传入的函数只要给定项大于 2 就会返回true， 对于every()，它返回的是false， 因为只有部分数组项符合条件，对于some() 就返回true， 因为至少有一项是大于 2 的。 12345678910111213var numbers = [1,2,3,4,5,4,3,2,1];var everyResult = numbers.every(function(item, index, array)&#123; return (item &gt; 2);&#125;);alert(everyResult); //falsevar someResult = numbers.some(function(item, index, array)&#123; return (item &gt; 2);&#125;);alert(someResult); //true filter() 例子通过filter（）方法创建并返回一个所有数值都大于 2 的数组 1234567var numbers = [1,2,3,4,5,4,3,2,1];var filterResult = numbers.filter(function(item, index, array)&#123; return (item &gt; 2);&#125;);alert(filterResult); //[3,4,5,4,3] map() 例子给数组中每一项都乘以 21234567var numbers = [1,2,3,4,5,4,3,2,1];var mapResult = numbers.map(function(item, index, array)&#123; return item * 2;&#125;);alert(mapResult); //[2,4,6,8,10,8,6,4,2] forEach() 例子1234var numbers = [1,2,3,4,5,4,3,2,1];numbers.forEach(function(item, index, array)&#123; //执行某些操作&#125;) 5.2.9 归并方法reduce() 从数组第一项开始逐个遍历到最后reduceRight() 从数组最后一项开始，向前遍历到第一项四个参数（前一个值， 当前值， 项的索引， 数组对象） reduce() 例子求数组所有值之和12345var values = [1,2,3,4,5]; var sum = values.reduce(function(prev, cur, index, array)&#123; return prev + cur; &#125;); alert(sum); reduceRight() 例子求数组所有值之和 12345var values = [1,2,3,4,5]; var sum = values.reduceRight(function(prev, cur, index, array)&#123; return prev + cur; &#125;); alert(sum); 5.3 Data 类型Data.parse()-接收一个表示日期的字符串参数，然后根据这个字符串返回相应日期的毫秒数Data.UTC()-同样返回日期的毫秒数，但参数分别是年份、基于0但月份（一月是0，二月是1…）、月中的哪一天（1-31）、小时数（0-23）、分钟、秒、毫秒数。只有前两个参数，年和月是必须的 12345//GMT时间2000年1月1日午夜零时var y2k = new Data(Data.UTC(2000,0));//GMT时间2005年5月5日下午5:55:55var allFive = new Data(Data.UTC(2005,4,5,17,55,55)); ES5中添加来Data.now()方法 5.3.1 继承的方法","categories":[{"name":"前端学习","slug":"前端学习","permalink":"https://akitsukiwong.github.io/categories/前端学习/"}],"tags":[{"name":"js","slug":"js","permalink":"https://akitsukiwong.github.io/tags/js/"}]},{"title":"数组常用方法","slug":"2017-11-20 数组常用方法","date":"2017-11-20T07:04:48.000Z","updated":"2018-05-11T09:43:03.292Z","comments":true,"path":"2017/11/20/2017-11-20 数组常用方法/","link":"","permalink":"https://akitsukiwong.github.io/2017/11/20/2017-11-20 数组常用方法/","excerpt":"","text":"栈方法push() 接收任意数量的参数逐个添加到数组末尾（从末尾加） pop() 从数组末尾移除最后一项（删最后一个） 队列方法shift() 移除数组中的第一个项（删第一个） unshift() 在数组前端添加任意个项（从前面加） 重排列方法reverse() 翻转数组项的顺序 sort() 升序排列（首字母排序，不是按大小） 比较函数升序12345678910111213function compare(value1, value2) &#123; if (value1 &lt; value2) &#123; return -1; &#125; else if (value1 &gt; value2) &#123; return 1; &#125; else &#123; return 0; &#125; &#125; var values = [0, 1, 5, 10, 15]; values.sort(compare); alert(values); //0,1,5,10,15 降序12345678910111213function compare(value1, value2) &#123; if (value1 &lt; value2) &#123; return 1; &#125; else if (value1 &gt; value2) &#123; return -1; &#125; else &#123; return 0; &#125; &#125; var values = [0, 1, 5, 10, 15]; values.sort(compare); alert(values); //15,10,5,1,0 操作方法concat() 末尾添加数组 1contan( [ &quot;black&quot; , &quot;yellow&quot; , &quot;red&quot; ] ) splice() 数组中部插入项 删除splice（要删除的第一项的位置， 要删除的项数） splice( 0, 2 ) 删除数组中前两项 插入splice( 起始位置， 0（要删除的项数）， 要插入的项) splice( 2, 0, &quot;red&quot;, &quot;green&quot; )从当前数组的位置2 开始插入字符串“red” 和“green” 替换splice( 起始位置， 要删除的项数， 要插入的任意数量的项) splice( 2, 1, &quot;red&quot;, &quot;green&quot; ) 会删除当前数组位置 2 的项， 然后再从位置 2 开始插入字符串 “red” 和“green” 例子 123456789101112var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;];var removed = colors.splice(0,1); //remove the first itemalert(colors); //green,bluealert(removed); //red - one item array removed = colors.splice(1, 0, &quot;yellow&quot;, &quot;orange&quot;); //insert two items at position 1alert(colors); //green,yellow,orange,bluealert(removed); //empty array removed = colors.splice(1, 1, &quot;red&quot;, &quot;purple&quot;); //insert two values, remove onealert(colors); //green,red,purple,orange,bluealert(removed); //yellow - one item array 位置方法indexOf() 从数组的开头（位置0）开始向后查找， 没找到的情况下会返回-1 lastIndexOf 从数组的末尾开始向前查找， 没找到的情况下会返回-1 例子 1234567891011121314var numbers = [1,2,3,4,5,4,3,2,1];alert(numbers.indexOf(4)); //3alert(numbers.lastIndexOf(4)); //5 alert(numbers.indexOf(4, 4)); //5alert(numbers.lastIndexOf(4, 4)); //3 var person = &#123; name: &quot;Nicholas&quot; &#125;;var people = [&#123; name: &quot;Nicholas&quot; &#125;];var morePeople = [person]; alert(people.indexOf(person)); //-1alert(morePeople.indexOf(person)); //0 迭代方法every() 对数组中的每一项运行给定函数， 如果该函数对每一项都返回true， 则返回true。 filter() 对数组中的每一项运行给定函数， 返回该函数会返回 true 的项组成的数组。 forEach() 对数组中的每一项运行给定的函数。 这个方法没有返回值。 map() 对数组中的每一项运行给定的函数， 返回每次函数调用的结果组成的数组。 some() 对数组中的每一项运行给定的函数， 如果该函数对任一项返回true， 则返回true。 以上方法都不会修改数组中的包含的值， 传入这些方法会接受三个参数（数组项的值， 该项在数组中的位置， 数组对象本身） every() some() 例子以上代码调用的every() 和 some() ， 传入的函数只要给定项大于 2 就会返回true， 对于every()，它返回的是false， 因为只有部分数组项符合条件，对于some() 就返回true， 因为至少有一项是大于 2 的。 12345678910111213var numbers = [1,2,3,4,5,4,3,2,1]; var everyResult = numbers.every(function(item, index, array)&#123; return (item &gt; 2);&#125;); alert(everyResult); //false var someResult = numbers.some(function(item, index, array)&#123; return (item &gt; 2);&#125;); alert(someResult); //true filter() 例子通过filter（）方法创建并返回一个所有数值都大于 2 的数组 1234567var numbers = [1,2,3,4,5,4,3,2,1]; var filterResult = numbers.filter(function(item, index, array)&#123; return (item &gt; 2);&#125;); alert(filterResult); //[3,4,5,4,3] map() 例子给数组中每一项都乘以 2 1234567var numbers = [1,2,3,4,5,4,3,2,1]; var mapResult = numbers.map(function(item, index, array)&#123; return item * 2; &#125;); alert(mapResult); //[2,4,6,8,10,8,6,4,2] forEach() 例子1234var numbers = [1,2,3,4,5,4,3,2,1];numbers.forEach(function(item, index, array)&#123; //执行某些操作&#125;) 归并方法reduce() 从数组第一项开始逐个遍历到最后 reduceRight() 从数组最后一项开始，向前遍历到第一项 四个参数（前一个值， 当前值， 项的索引， 数组对象） reduce() 例子求数组所有值之和 12345var values = [1,2,3,4,5];var sum = values.reduce(function(prev, cur, index, array)&#123; return prev + cur;&#125;);alert(sum); reduceRight() 例子求数组所有值之和 12345var values = [1,2,3,4,5];var sum = values.reduceRight(function(prev, cur, index, array)&#123; return prev + cur;&#125;);alert(sum);","categories":[{"name":"前端学习","slug":"前端学习","permalink":"https://akitsukiwong.github.io/categories/前端学习/"}],"tags":[{"name":"js","slug":"js","permalink":"https://akitsukiwong.github.io/tags/js/"},{"name":"数组","slug":"数组","permalink":"https://akitsukiwong.github.io/tags/数组/"}]},{"title":"Markdown学习","slug":"2017-11-13 Markdown学习","date":"2017-11-13T07:16:21.000Z","updated":"2018-05-11T08:51:14.991Z","comments":true,"path":"2017/11/13/2017-11-13 Markdown学习/","link":"","permalink":"https://akitsukiwong.github.io/2017/11/13/2017-11-13 Markdown学习/","excerpt":"","text":"一级标题H1二级标题H2三级标题H3四级标题H4五级标题H5六级标题H6无序列表 列表1 列表2 列表3 或者 列表1 列表1 列表1 再或者 列表1 列表1 列表1 引用 这个样子引用，啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦 还有个二级的引用，哈哈哈哈哈哈哈哈哈哈哈哈或或或或或或或或或或或或或或或或或或或或或 三级的引用，看了啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦 回归一级吧，记得要空一行 例子 这是一个标题。 这是第一行列表项。 这是第二行列表项。 给出一些例子代码： return shell_exec(&quot;echo $input | $markdown_script&quot;); 代码区块这是一个普通段落： 这是一个代码区块。 前面一个制表符就是代码 或者四个空格 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理 分割线 链接I get 10 times more traffic from Google than fromYahoo or MSN. I get 10 times more traffic from Google than fromYahoo or MSN. 一小段代码Use the printf() function.There is a literal backtick (`) here.A single backtick in a code span: ` A backtick-delimited string in a code span: `foo` 表格 Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 dog bird cat foo foo foo bar bar bar baz baz baz","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://akitsukiwong.github.io/tags/Markdown/"}]}]}